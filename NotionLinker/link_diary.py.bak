
# -*- coding: utf-8 -*-
"""
Notion: 支払管理DB → DailyJournal を「一致用日付」で自動リレーション
- Make/Zapier 不使用、Notion API だけで動作
- 支払管理DBの「支払予定日」が入っているページに対して、DailyJournal 側の「一致用日付」が同じ
  ページを検索し、あればリンク、なければ作成してリンクします。
  既にリレーション済みでも、一致用日付が不一致の場合は貼り直します（一致なら更新しません）。
"""

import os
import sys
import time
from typing import Optional, Dict, Any, List

try:
    from notion_client import Client
except Exception:
    print("notion-client がインストールされていません。`pip install -r requirements.txt` を実行してください。")
    sys.exit(1)

from dotenv import load_dotenv
load_dotenv()

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
PAY_DB_ID = os.getenv("PAY_DB_ID")
JOURNAL_DB_ID = os.getenv("JOURNAL_DB_ID")
DRY_RUN = os.getenv("DRY_RUN", "false").lower() in ("1", "true", "yes")

PROP_PAY_DATE = os.getenv("PROP_PAY_DATE", "支払予定日")              # 支払管理DB: 日付
PROP_MATCH_STR = os.getenv("PROP_MATCH_STR", "一致用日付")           # 両DB共通: テキスト or 数式(文字列)
PROP_REL_TO_JOURNAL = os.getenv("PROP_REL_TO_JOURNAL", "日記[予定日]") # 支払管理DB: リレーション
PROP_JOURNAL_TITLE = os.getenv("PROP_JOURNAL_TITLE", "タイトル")      # DailyJournal: タイトル（あなたの環境は「タイトル」）

if not NOTION_TOKEN or not PAY_DB_ID or not JOURNAL_DB_ID:
    print("環境変数 NOTION_TOKEN / PAY_DB_ID / JOURNAL_DB_ID が未設定です。.env を設定してください。")
    sys.exit(1)

notion = Client(auth=NOTION_TOKEN)

# --- utils ---
def get_prop_val(prop: Dict[str, Any]) -> Optional[Any]:
    t = prop.get("type")
    if t == "date":
        v = prop.get("date")
        return v.get("start") if v else None
    if t == "rich_text":
        return "".join([span.get("plain_text", "") for span in prop.get("rich_text", [])]) or None
    if t == "title":
        return "".join([span.get("plain_text", "") for span in prop.get("title", [])]) or None
    if t == "formula":
        f = prop.get("formula", {})
        if f.get("type") == "string":
            return f.get("string")
        if f.get("type") == "number":
            return f.get("number")
        if f.get("type") == "boolean":
            return f.get("boolean")
        if f.get("type") == "date":
            d = f.get("date") or {}
            return d.get("start")
        return None
    if t == "relation":
        return prop.get("relation") or []
    if t == "status":
        s = prop.get("status")
        return s.get("name") if s else None
    if t == "select":
        s = prop.get("select")
        return s.get("name") if s else None
    if t == "multi_select":
        return [x.get("name") for x in prop.get("multi_select", [])]
    if t == "checkbox":
        return prop.get("checkbox")
    if t == "number":
        return prop.get("number")
    if t == "url":
        return prop.get("url")
    if t == "email":
        return prop.get("email")
    if t == "phone_number":
        return prop.get("phone_number")
    if t == "people":
        return prop.get("people")
    return None

def iter_database_pages(database_id: str, filter_obj: Optional[Dict[str, Any]] = None):
    start_cursor = None
    while True:
        payload = {"database_id": database_id, "page_size": 100}
        if filter_obj:
            payload["filter"] = filter_obj
        if start_cursor:
            payload["start_cursor"] = start_cursor
        res = notion.databases.query(**payload)
        for r in res.get("results", []):
            yield r
        if not res.get("has_more"):
            break
        start_cursor = res.get("next_cursor")

def query_payment_pages() -> List[Dict[str, Any]]:
    """支払予定日が空でないページをすべて取得"""
    filter_obj = {
        "property": PROP_PAY_DATE,
        "date": {"is_not_empty": True},
    }
    return list(iter_database_pages(PAY_DB_ID, filter_obj))

def query_payment_pages_need_relation() -> List[Dict[str, Any]]:
    filter_obj = {
        "and": [
            {"property": PROP_PAY_DATE, "date": {"is_not_empty": True}},
            {"property": PROP_REL_TO_JOURNAL, "relation": {"is_empty": True}},
        ]
    }
    return list(iter_database_pages(PAY_DB_ID, filter_obj))

def find_journal_by_match(match_text: str) -> Optional[Dict[str, Any]]:
    res = notion.databases.query(
        **{
            "database_id": JOURNAL_DB_ID,
            "filter": {"property": PROP_MATCH_STR, "rich_text": {"equals": match_text}},
            "page_size": 1,
        }
    )
    arr = res.get("results", [])
    return arr[0] if arr else None

def create_journal_page(match_text: str) -> Dict[str, Any]:
    """DailyJournal にページを作成（タイトルのみ）。一致用日付が formula のため書かない。"""
    props = {
        PROP_JOURNAL_TITLE: {"title": [{"type": "text", "text": {"content": match_text}}]},
        # PROP_MATCH_STR は formula のため、APIでは書かない（自動計算に任せる）
    }
    if DRY_RUN:
        print(f"[ドライラン] DailyJournal にページを作成: タイトル={match_text}")
        return {"id": "dry-run-journal-id"}
    return notion.pages.create(**{"parent": {"database_id": JOURNAL_DB_ID}, "properties": props})

def set_relation(pay_page_id: str, journal_page_id: str):
    props = {PROP_REL_TO_JOURNAL: {"relation": [{"id": journal_page_id}]}}
    if DRY_RUN:
        print(f"[ドライラン] リレーション設定: 支払ページ={pay_page_id} -> 日記ページ={journal_page_id}")
        return
    notion.pages.update(**{"page_id": pay_page_id, "properties": props})

def get_page_prop(page: Dict[str, Any], prop_name: str) -> Dict[str, Any]:
    props = page.get("properties", {})
    if prop_name not in props:
        raise KeyError(f"プロパティ '{prop_name}' が見つかりません。DBのプロパティ名を確認してください。")
    return props[prop_name]

def main():
    print("== Notion Linker: 支払管理DB → DailyJournal ==")
    pages = query_payment_pages()
    if not pages:
        print("対象ページはありません（支払予定日が未設定）。")
        return

    print(f"対象ページ数: {len(pages)}")
    for i, page in enumerate(pages, 1):
        pay_page_id = page["id"]

        # 一致用日付（文字列）を取得（数式 or リッチテキストの両対応）
        try:
            match_prop = get_page_prop(page, PROP_MATCH_STR)
        except KeyError as e:
            print(f"[警告] {e}; このページをスキップします: {pay_page_id}")
            continue

        match_text = get_prop_val(match_prop)
        if not match_text:
            # フォールバック：支払予定日から YYYY-MM-DD を生成
            try:
                pay_date_prop = get_page_prop(page, PROP_PAY_DATE)
            except KeyError as e:
                print(f"[警告] {e}; このページをスキップします: {pay_page_id}")
                continue
            iso = get_prop_val(pay_date_prop)
            if not iso or len(iso) < 10:
                print(f"[警告] 一致用日付も支払予定日も取得できません: {pay_page_id}")
                continue
            match_text = iso[:10]

        # 既存リレーションがある場合は、リンク先の一致用日付を確認
        try:
            rel_prop = get_page_prop(page, PROP_REL_TO_JOURNAL)
        except KeyError as e:
            print(f"[警告] {e}; このページをスキップします: {pay_page_id}")
            continue
        current_relations = get_prop_val(rel_prop) or []
        if current_relations:
            rel_page_id = current_relations[0].get("id")
            try:
                journal_page = notion.pages.retrieve(page_id=rel_page_id)
                journal_match_prop = get_page_prop(journal_page, PROP_MATCH_STR)
                journal_match_text = get_prop_val(journal_match_prop)
            except Exception as e:
                journal_match_text = None

            if journal_match_text == match_text:
                print(f"[{i}/{len(pages)}] 既存リレーションの日付が一致のためスキップ: {pay_page_id}")
                continue

        print(f"[{i}/{len(pages)}] 一致用日付='{match_text}' → DailyJournal を検索")
        journal = find_journal_by_match(match_text)

        if not journal:
            print(f"  該当なし → DailyJournal にページを作成します")
            journal = create_journal_page(match_text)

        journal_id = journal["id"]
        print(f"  リレーション設定（貼り直し含む）: {pay_page_id} -> {journal_id}")
        set_relation(pay_page_id, journal_id)
        time.sleep(0.2)

    print("完了しました。")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n中断しました。")

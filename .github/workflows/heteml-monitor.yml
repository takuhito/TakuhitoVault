name: HETEML Monitor

on:
  schedule:
    # 6時間ごとに実行（月124時間 = 7,440分）
    - cron: '0 */6 * * *'
  workflow_dispatch:  # 手動実行も可能

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd HETEMLMonitor
        pip install -r requirements.txt
        
    - name: Create config file and directories
      run: |
        cd HETEMLMonitor
        cp config.example.py config.py
        mkdir -p logs
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Download previous file history
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: heteml-file-history
        path: HETEMLMonitor/
        
    - name: Debug environment
      run: |
        cd HETEMLMonitor
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Config file exists:"
        ls -la config.py || echo "Config file not found"
        echo "File history exists:"
        ls -la file_history.json || echo "File history not found"
        echo "File history content (if exists):"
        if [ -f file_history.json ]; then
          echo "File size: $(wc -c < file_history.json) bytes"
          echo "First few lines:"
          head -5 file_history.json
        else
          echo "No file history found - this is expected for first run"
        fi
        echo "Python version:"
        python --version
        echo "Installed packages:"
        pip list | grep -E "(paramiko|requests|python-dotenv)"
        
    - name: Run hello test first
      run: |
        cd HETEMLMonitor
        echo "=== Helloテスト開始 ==="
        python test_hello.py
        echo "=== Helloテスト終了 ==="
        
    - name: Run minimal test
      run: |
        cd HETEMLMonitor
        echo "=== 最小限テスト開始 ==="
        python test_minimal.py
        echo "=== 最小限テスト終了 ==="
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Run HETEML Monitor
      run: |
        cd HETEMLMonitor
        echo "=== スクリプト実行開始 ==="
        python -u heteml_monitor_github_action.py 2>&1
        echo "=== スクリプト実行終了 ==="
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Check and upload file history
      if: always()
      run: |
        cd HETEMLMonitor
        if [ -f file_history.json ]; then
          echo "File history exists, will upload"
          echo "File size: $(wc -c < file_history.json) bytes"
        else
          echo "File history does not exist, creating empty one"
          echo '{"files": [], "hashes": {}, "last_updated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > file_history.json
        fi
        
    - name: Upload file history as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: heteml-file-history
        path: HETEMLMonitor/file_history.json
        retention-days: 30
        
    - name: Check and upload logs
      if: always()
      run: |
        cd HETEMLMonitor
        if [ -d logs ] && [ "$(ls -A logs)" ]; then
          echo "Logs exist, will upload"
          ls -la logs/
        else
          echo "No logs found, creating empty log file"
          mkdir -p logs
          echo "$(date): No logs generated in this run" > logs/heteml_monitor.log
        fi
        
    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: heteml-monitor-logs
        path: HETEMLMonitor/logs/
        retention-days: 7

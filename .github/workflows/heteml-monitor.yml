name: HETEML Monitor

on:
  schedule:
    # 6時間ごとに実行（月124時間 = 7,440分）
    - cron: '0 */6 * * *'
  workflow_dispatch:  # 手動実行も可能
  push:
    branches: [ main ]
    paths:
      - 'HETEMLMonitor/**'
      - '.github/workflows/heteml-monitor.yml'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd HETEMLMonitor
        pip install -r requirements.txt
        
    - name: Create config file and directories
      run: |
        cd HETEMLMonitor
        cp config.example.py config.py
        mkdir -p logs
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Download previous file history
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: heteml-file-history
        path: HETEMLMonitor/
        
    - name: Create file history if not exists
      run: |
        cd HETEMLMonitor
        echo "=== ファイル履歴の確認と作成 ==="
        if [ -f "file_history.json" ]; then
          echo "✅ 既存のファイル履歴が見つかりました"
          echo "ファイルサイズ: $(wc -c < file_history.json) bytes"
          echo "最終更新日時: $(stat -c %y file_history.json)"
          echo "内容の確認:"
          head -10 file_history.json
        else
          echo "❌ ファイル履歴が見つかりません"
          echo "新しいファイル履歴を作成します..."
          echo '{"files": [], "hashes": {}, "last_updated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "created_by": "GitHub Actions", "note": "初回実行用の空の履歴ファイル"}' > file_history.json
          echo "✅ 新しいファイル履歴を作成しました"
          echo "ファイルサイズ: $(wc -c < file_history.json) bytes"
        fi
        echo "======================================"
        
    - name: Debug file history download
      run: |
        echo "=== ファイル履歴ダウンロードのデバッグ ==="
        echo "現在のディレクトリ: $(pwd)"
        echo "HETEMLMonitorディレクトリの内容:"
        ls -la HETEMLMonitor/ || echo "HETEMLMonitorディレクトリが見つかりません"
        echo ""
        echo "ファイル履歴の確認:"
        if [ -f "HETEMLMonitor/file_history.json" ]; then
          echo "✅ file_history.json が見つかりました"
          echo "ファイルサイズ: $(wc -c < HETEMLMonitor/file_history.json) bytes"
          echo "最終更新日時: $(stat -c %y HETEMLMonitor/file_history.json)"
          echo "最初の数行:"
          head -5 HETEMLMonitor/file_history.json
        else
          echo "❌ file_history.json が見つかりません"
          echo "これは初回実行またはアーティファクト未作成を示しています"
        fi
        echo "======================================"
        
    - name: Debug environment
      run: |
        cd HETEMLMonitor
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Config file exists:"
        ls -la config.py || echo "Config file not found"
        echo "File history exists:"
        ls -la file_history.json || echo "File history not found"
        echo "File history content (if exists):"
        if [ -f file_history.json ]; then
          echo "File size: $(wc -c < file_history.json) bytes"
          echo "First few lines:"
          head -5 file_history.json
        else
          echo "No file history found - this is expected for first run"
        fi
        echo "Python version:"
        python --version
        echo "Installed packages:"
        pip list | grep -E "(paramiko|requests|python-dotenv)"
        
    - name: Run hello test first
      run: |
        cd HETEMLMonitor
        echo "=== Helloテスト開始 ==="
        python test_hello.py
        echo "=== Helloテスト終了 ==="
        
    - name: Run minimal test
      run: |
        cd HETEMLMonitor
        echo "=== 最小限テスト開始 ==="
        python test_minimal.py
        echo "=== 最小限テスト終了 ==="
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Run HETEML Monitor
      run: |
        cd HETEMLMonitor
        echo "=== スクリプト実行開始 ==="
        echo "開始時刻: $(date)"
        echo "タイムアウト設定: 30分"
        echo ""
        echo "ファイル履歴の最終確認:"
        if [ -f "file_history.json" ]; then
          echo "✅ file_history.json が存在します"
          echo "サイズ: $(wc -c < file_history.json) bytes"
          echo "最終更新日時: $(stat -c %y file_history.json)"
          echo "内容の確認:"
          head -5 file_history.json
        else
          echo "❌ file_history.json が存在しません"
          echo "エラー: ファイル履歴が作成されていません"
          exit 1
        fi
        echo ""
        echo "スクリプト実行中..."
        echo "注意: 大量のファイルがある場合、処理に時間がかかる可能性があります"
        timeout 30m python -u heteml_monitor_github_action.py 2>&1
        EXIT_CODE=$?
        echo ""
        echo "=== スクリプト実行終了 ==="
        echo "終了時刻: $(date)"
        echo "終了コード: $EXIT_CODE"
        if [ $EXIT_CODE -eq 124 ]; then
          echo "⚠️  タイムアウトが発生しました（30分）"
          echo "原因: ファイル数が多い、または処理が停止している可能性"
        elif [ $EXIT_CODE -eq 0 ]; then
          echo "✅ 正常終了"
        else
          echo "❌ エラーで終了"
        fi
      env:
        HETEML_PASSWORD: ${{ secrets.HETEML_PASSWORD }}
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
        
    - name: Check and upload file history
      if: always()
      run: |
        cd HETEMLMonitor
        if [ -f file_history.json ]; then
          echo "File history exists, will upload"
          echo "File size: $(wc -c < file_history.json) bytes"
        else
          echo "File history does not exist, creating empty one"
          echo '{"files": [], "hashes": {}, "last_updated": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > file_history.json
        fi
        
    - name: Upload file history as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: heteml-file-history
        path: HETEMLMonitor/file_history.json
        retention-days: 30
        
    - name: Check and upload logs
      if: always()
      run: |
        cd HETEMLMonitor
        if [ -d logs ] && [ "$(ls -A logs)" ]; then
          echo "Logs exist, will upload"
          ls -la logs/
        else
          echo "No logs found, creating empty log file"
          mkdir -p logs
          echo "$(date): No logs generated in this run" > logs/heteml_monitor.log
        fi
        
    - name: Upload logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: heteml-monitor-logs
        path: HETEMLMonitor/logs/
        retention-days: 7
        
    - name: Workflow completion summary
      if: always()
      run: |
        echo "=== HETEML Monitor Workflow Summary ==="
        echo "Workflow completed at: $(date)"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "======================================"
